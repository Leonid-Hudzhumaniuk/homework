using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
// Леонід

namespace GameLoopExemple
{
    #region Program

    internal class Program
    {
        static void Main(string[] args)
        {

            var game = new SnakeGame();
            game.Start();
        }
      
    }
    #endregion

    #region SnakeGame

    public class SnakeGame : GameLoop
    {
        private Random random;

        int cursorPositionX = Console.WindowWidth / 2;
        int cursorPositionY = Console.WindowHeight / 2;

        char head = Convert.ToChar(1);
        char body = Convert.ToChar(3);
        char let = Convert.ToChar(4);
        private int letPositionX;
        private int letPositionY;

        public SnakeGame()
        {
            random = new Random();
            letPositionX = random.Next(1, Console.WindowWidth);
            letPositionY = random.Next(1, Console.WindowHeight);

        }
        ConsoleKey key = ConsoleKey.NoName;


        protected override void Input()
        {
            key = ConsoleKey.NoName;
            //input
            if (Console.KeyAvailable)
            {
                key = Console.ReadKey(true).Key;
            }

        }

        protected override void Update()
        {
            while (true)
            {
                //timing
                System.Threading.Thread.Sleep(50);


                //input

                //update
                switch (key)
                {
                    case ConsoleKey.UpArrow:
                        cursorPositionY--;
                        break;
                    case ConsoleKey.DownArrow:
                        cursorPositionY++;
                        break;
                    case ConsoleKey.LeftArrow:
                        cursorPositionX--;
                        break;
                    case ConsoleKey.RightArrow:
                        cursorPositionX++;
                        break;
                }

                if (cursorPositionX >= Console.WindowWidth - 3)
                {
                    cursorPositionX = 0;
                }


                if (cursorPositionX == letPositionX && cursorPositionY == letPositionY)
                {
                    cursorPositionX = Console.WindowWidth / 2;
                    cursorPositionY = Console.WindowHeight / 2;
                    Console.Write($"       you died        ");
                    Environment.Exit(0);

                }


            }
        }
        protected override void Draw()
        {
            //render

            switch (key)
            {
                case ConsoleKey.UpArrow:
                    Console.Clear();
                    Console.SetCursorPosition(letPositionX, letPositionY);
                    Console.WriteLine(let);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY);
                    Console.WriteLine(head);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY + 1);
                    Console.WriteLine(body);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY + 2);
                    Console.Write(body);
                    break;
                case ConsoleKey.DownArrow:
                    Console.Clear();
                    Console.SetCursorPosition(letPositionX, letPositionY);
                    Console.WriteLine(let);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY);
                    Console.WriteLine(head);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY - 1);
                    Console.WriteLine(body);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY - 2);
                    Console.Write(body);
                    break;
                case ConsoleKey.LeftArrow:
                    Console.Clear();
                    Console.SetCursorPosition(letPositionX, letPositionY);
                    Console.WriteLine(let);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY);
                    Console.Write($"{head}{body}{body}");
                    break;
                case ConsoleKey.RightArrow:
                    Console.Clear();
                    Console.SetCursorPosition(letPositionX, letPositionY);
                    Console.WriteLine(let);
                    Console.SetCursorPosition(cursorPositionX, cursorPositionY);
                    Console.Write($"{body}{body}{head}");
                    break;

            }

        }
    }
    #endregion

    #region GameLoop Libray

    public abstract class GameLoop
    {
        public void Start()
        {
            while (true)
            {
                Timing();
                Input();
                Update();
                Draw();
            }
        }

        private void Timing()
        {
            //timing
            System.Threading.Thread.Sleep(50);
        }

        protected abstract void Input();
        protected abstract void Update();
        protected abstract void Draw();

    }

    #endregion
}
